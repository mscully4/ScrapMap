apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  labels:
    app: backend-deployment
spec:
  replicas: 1
  #Wait 60 seconds before declaring a pod to be ready
  minReadySeconds: 60
  selector:
    matchLabels:
      app: backend-pods
  strategy: 
    rollingUpdate:
      #Only allows one additional pod to be created over the specified replica count
      maxSurge: 1
      #The number of pods available must be at least the specified replica count minus 0
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend-pods
    spec:
      # run using the backend service acccount
      serviceAccountName: backend-sa
      containers:
      # [Django App]
      - name: backend-pod
        image: gcr.io/scrapmap-277602/backend:latest
        resources:
          # Setting the amount of resources the pod needs to be guaranteed
          requests:
            cpu: .2
            memory: '256M'
        securityContext:
          # Run as guest
          runAsUser: 405
          # Don't allow the user to run as root
          runAsNonRoot: true
          # readOnlyRootFilesystem: true
        volumeMounts:
            #Mount the credentials for the CloudSql DB
          - name: database-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: aws
            mountPath: /secrets/aws
            readOnly: true
          - name: gmail
            mountPath: /secrets/gmail
            readOnly: true
        #Tests whether the pod is still responsive
        livenessProbe:
          httpGet:
            path: /liveliness
            port: 8080
          #Wait 30 seconds before probing
          initialDelaySeconds: 30
          #Probe request times out after 3 seconds
          timeoutSeconds: 3
        #Tests whether the pod is ready to serve requests
        readinessProbe:
          #Probe will be executed every 3 seconds
          periodSeconds: 3
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 30
        #Always re-pull the container image when the pod is starting up
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
                - sh
                - -c 
                - "sleep 5"
        ports:
        - containerPort: 8080

      # [SQL Proxy]
      - image: gcr.io/cloudsql-docker/gce-proxy:1.16
        name: cloudsql-proxy
        resources:
          #Setting the amount of resources the pod needs to be guarenteed
          requests:
            # cpu: '200M'
            memory: '128M'
        securityContext:
          # Run as guest
          runAsUser: 405
          # Don't allow container to run as root
          runAsNonRoot: true
        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                  "-instances=scrapmap-277602:us-central1:scrapmap=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        volumeMounts:
          - name: cloudsql-oauth-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: database-credentials
            mountPath: /cloudsql
      # Secrets
      volumes:
        - name: database-credentials
          secret:
            secretName: database-credentials
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: aws
          secret:
            secretName: aws
        - name: gmail
          secret:
            secretName: gmail
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs

